{"version":3,"file":"static/js/884.0a42be14.chunk.js","mappings":"sLACA,EAAuB,wB,kBCkBvB,EAhBkB,SAACA,GACjB,OACE,gBAAIC,UAAWC,EAAf,WACE,+BACE,iCACE,uBAAIF,EAAMG,UAEZ,gCAAaH,EAAMI,aAErB,SAAC,KAAD,CAAMC,GAAE,iBAAaL,EAAMM,IAAKL,UAAU,MAA1C,iCCXN,EAAuB,wBAAvB,EAAyD,2BCmDzD,EArCkB,SAACD,GACjB,IAXkBO,EAAQC,EAWpBC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MAIXC,EAA+C,QAFjC,IAAIC,gBAAgBH,EAASI,QAEXC,IAAI,QAEpCC,GAlBYV,EAkBaP,EAAMO,OAlBXC,EAkBkBK,EAjBrCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,GAAK,GAAK,MAuBxC,OACE,UAAC,EAAAe,SAAD,YACE,gBAAKpB,UAAWC,EAAhB,UACE,oBAAQoB,QAXa,WAMzBb,EAAQc,KAAR,UAAgBZ,EAASa,SAAzB,iBAA2CX,EAAoB,OAAQ,SAKnE,kBAA6CA,EAAoB,aAAe,kBAElF,eAAIZ,UAAWC,EAAf,SACGe,EAAaQ,KAAI,SAACC,GAAD,OAChB,SAAC,EAAD,CAEEpB,GAAIoB,EAAMpB,GACVF,OAAQsB,EAAMtB,OACdD,KAAMuB,EAAMvB,MAHPuB,EAAMpB,c,gGCxCvB,EAAuB,mB,SCKvB,EAJa,SAACN,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAM2B,Y,SCF9C,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BC4DnI,EAvDkB,SAAC3B,GACjB,OAAmC4B,EAAAA,EAAAA,WAAS,GAA5C,eAAMC,EAAN,KAAkBC,EAAlB,KACMC,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAqBrB,OACE,UAAC,EAAAX,SAAD,YACE,SAAC,KAAD,CAAQa,KAAQL,EAAYM,QAAS,SAACxB,GAAD,MAAY,2EACjD,SAAC,EAAD,WACE,kBAAMV,UAAWC,EAAckC,QAZjB,WAClBN,GAAc,IAW4CO,SAvB5D,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBT,EAAeU,QAAQC,MACvCC,EAAcV,EAAaQ,QAAQC,MAIzC1C,EAAM4C,WAAW,CAAExC,OAAQoC,EAAerC,KAAMwC,KAe5C,UACK3C,EAAM6C,YACL,gBAAK5C,UAAWC,EAAhB,UACE,SAAC4C,EAAA,EAAD,OAIJ,iBAAK7C,UAAWC,EAAhB,WACE,kBAAO6C,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAO1C,GAAG,SAAS2C,IAAKlB,QAEtC,iBAAK9B,UAAWC,EAAhB,WACE,kBAAO6C,QAAQ,OAAf,mBACA,qBAAUzC,GAAG,OAAO4C,KAAK,IAAID,IAAKhB,QAEpC,gBAAKhC,UAAWC,EAAhB,UACE,mBAAQoB,QAxBQ,WAC1BQ,GAAc,IAuBoC7B,UAAU,MAAlD,kC,kBCvBd,G,OApBiB,WACb,OAA6BkD,EAAAA,EAAAA,GAAQC,EAAAA,IAA9BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OACpBC,QAAQC,IAAIF,GACZ,IAAM7C,GAAUC,EAAAA,EAAAA,OAEhB+C,EAAAA,EAAAA,YAAU,WACQ,cAAXH,GACC7C,EAAQc,KAAK,aAElB,CAAC+B,EAAQ7C,IAMZ,OAAQ,SAAC,EAAD,CAAWoC,UAAqB,YAATS,EAAoBV,WAJ3B,SAACc,GACxBL,EAAYK","sources":["webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__cJRaG\"};","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to= {`quotes/${props.id}`}className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__YhMZf\",\"sorting\":\"QuoteList_sorting__ojiEf\"};","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending= queryParams.get('sort')=== 'asc';\n\n  const sortedQuotes= sortQuotes(props.quotes,isSortingAscending )\n\n  const changeSortingHandler=()=>{\n    // history.push({\n    //   pathname: location.pathname,\n    //   search: `?sort=${(isSortingAscending? 'desc': 'asc')}`\n    // });\n\n    history.push(`${location.pathname}?sort=${(isSortingAscending? 'desc': 'asc')}`)\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isSortingAscending ?'Descending' : 'Ascending' }</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__+Cgvg\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__zrq75\",\"loading\":\"QuoteForm_loading__tDlPZ\",\"control\":\"QuoteForm_control__Ce4GI\",\"actions\":\"QuoteForm_actions__mixjf\"};","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card'\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const[isEntering, setIsEntering] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const focusHandler =()=>{\n    setIsEntering(true);\n  }\n\n  const finishEnteringHandler=()=>{\n    setIsEntering(false);\n  }\n\n  return (\n    <Fragment> \n      <Prompt when = {isEntering} message={(location)=>'Are you sure you want to leave? All your enetered data will be lost!'}/>\n      <Card>\n        <form className={classes.form} onFocus={focusHandler} onSubmit={submitFormHandler}>\n            {props.isLoading && (\n              <div className={classes.loading}>\n                <LoadingSpinner />\n              </div>\n            )}\n\n            <div className={classes.control}>\n              <label htmlFor='author'>Author</label>\n              <input type='text' id='author' ref={authorInputRef} />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='text'>Text</label>\n              <textarea id='text' rows='5' ref={textInputRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n              <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n            </div>\n        </form>\n      </Card>\n\n    </Fragment>\n    \n    \n  );\n};\n\nexport default QuoteForm;\n","import QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport {addQuote} from '../lib/api';\r\nimport { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\n\r\nconst NewQuote = ()=>{\r\n    const {sendRequest, status}= useHttp(addQuote);\r\n    console.log(status)\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{       \r\n        if(status === 'completed'){\r\n            history.push('/quotes');\r\n        }   \r\n    }, [status, history]);\r\n\r\n    const addQuoteHandler = (quoteData) =>{\r\n     sendRequest(quoteData);   \r\n    };\r\n\r\n    return (<QuoteForm isLoading ={status==='pending'} onAddQuote={addQuoteHandler}/>);\r\n\r\n\r\n    \r\n}  \r\nexport default NewQuote;"],"names":["props","className","classes","text","author","to","id","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","push","pathname","map","quote","children","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","isLoading","LoadingSpinner","htmlFor","type","ref","rows","useHttp","addQuote","sendRequest","status","console","log","useEffect","quoteData"],"sourceRoot":""}